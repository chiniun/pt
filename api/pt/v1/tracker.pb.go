// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.24.4
// source: pt/v1/tracker.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnnounceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bitTracker
	InfoHash      string `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
	PeerId        string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Ip            string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Uploaded      uint64 `protobuf:"varint,5,opt,name=uploaded,proto3" json:"uploaded,omitempty"`
	Downloaded    uint64 `protobuf:"varint,6,opt,name=downloaded,proto3" json:"downloaded,omitempty"`
	Left          uint64 `protobuf:"varint,7,opt,name=left,proto3" json:"left,omitempty"`
	Numwant       uint64 `protobuf:"varint,8,opt,name=numwant,proto3" json:"numwant,omitempty"`
	Key           string `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`
	Compact       bool   `protobuf:"varint,10,opt,name=compact,proto3" json:"compact,omitempty"`
	Supportcrypto bool   `protobuf:"varint,11,opt,name=supportcrypto,proto3" json:"supportcrypto,omitempty"`
	Event         string `protobuf:"bytes,12,opt,name=event,proto3" json:"event,omitempty"`
	// private tracker (guess)
	Passkey string `protobuf:"bytes,98,opt,name=passkey,proto3" json:"passkey,omitempty"` //len 32 || 0 bytes
	Authkey string `protobuf:"bytes,99,opt,name=authkey,proto3" json:"authkey,omitempty"`
}

func (x *AnnounceRequest) Reset() {
	*x = AnnounceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pt_v1_tracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceRequest) ProtoMessage() {}

func (x *AnnounceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pt_v1_tracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceRequest.ProtoReflect.Descriptor instead.
func (*AnnounceRequest) Descriptor() ([]byte, []int) {
	return file_pt_v1_tracker_proto_rawDescGZIP(), []int{0}
}

func (x *AnnounceRequest) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *AnnounceRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *AnnounceRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AnnounceRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AnnounceRequest) GetUploaded() uint64 {
	if x != nil {
		return x.Uploaded
	}
	return 0
}

func (x *AnnounceRequest) GetDownloaded() uint64 {
	if x != nil {
		return x.Downloaded
	}
	return 0
}

func (x *AnnounceRequest) GetLeft() uint64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *AnnounceRequest) GetNumwant() uint64 {
	if x != nil {
		return x.Numwant
	}
	return 0
}

func (x *AnnounceRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AnnounceRequest) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *AnnounceRequest) GetSupportcrypto() bool {
	if x != nil {
		return x.Supportcrypto
	}
	return false
}

func (x *AnnounceRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *AnnounceRequest) GetPasskey() string {
	if x != nil {
		return x.Passkey
	}
	return ""
}

func (x *AnnounceRequest) GetAuthkey() string {
	if x != nil {
		return x.Authkey
	}
	return ""
}

// TODO  bencode
type AnnounceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval   int64  `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Complete   int64  `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	Incomplete int64  `protobuf:"varint,3,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	Peers      []byte `protobuf:"bytes,4,opt,name=peers,proto3" json:"peers,omitempty"`
	PeerIpv6   []byte `protobuf:"bytes,5,opt,name=peer_ipv6,json=peerIpv6,proto3" json:"peer_ipv6,omitempty"`
}

func (x *AnnounceReply) Reset() {
	*x = AnnounceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pt_v1_tracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceReply) ProtoMessage() {}

func (x *AnnounceReply) ProtoReflect() protoreflect.Message {
	mi := &file_pt_v1_tracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceReply.ProtoReflect.Descriptor instead.
func (*AnnounceReply) Descriptor() ([]byte, []int) {
	return file_pt_v1_tracker_proto_rawDescGZIP(), []int{1}
}

func (x *AnnounceReply) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *AnnounceReply) GetComplete() int64 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *AnnounceReply) GetIncomplete() int64 {
	if x != nil {
		return x.Incomplete
	}
	return 0
}

func (x *AnnounceReply) GetPeers() []byte {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *AnnounceReply) GetPeerIpv6() []byte {
	if x != nil {
		return x.PeerIpv6
	}
	return nil
}

type ScrapeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoHash string `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
}

func (x *ScrapeRequest) Reset() {
	*x = ScrapeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pt_v1_tracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeRequest) ProtoMessage() {}

func (x *ScrapeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pt_v1_tracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeRequest.ProtoReflect.Descriptor instead.
func (*ScrapeRequest) Descriptor() ([]byte, []int) {
	return file_pt_v1_tracker_proto_rawDescGZIP(), []int{2}
}

func (x *ScrapeRequest) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

// TODO  `bencode`
type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Complete   int64 `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Incomplete int64 `protobuf:"varint,2,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pt_v1_tracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_pt_v1_tracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_pt_v1_tracker_proto_rawDescGZIP(), []int{3}
}

func (x *Stat) GetComplete() int64 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *Stat) GetIncomplete() int64 {
	if x != nil {
		return x.Incomplete
	}
	return 0
}

type ScrapeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files map[string]*Stat `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ScrapeReply) Reset() {
	*x = ScrapeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pt_v1_tracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeReply) ProtoMessage() {}

func (x *ScrapeReply) ProtoReflect() protoreflect.Message {
	mi := &file_pt_v1_tracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeReply.ProtoReflect.Descriptor instead.
func (*ScrapeReply) Descriptor() ([]byte, []int) {
	return file_pt_v1_tracker_proto_rawDescGZIP(), []int{4}
}

func (x *ScrapeReply) GetFiles() map[string]*Stat {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_pt_v1_tracker_proto protoreflect.FileDescriptor

var file_pt_v1_tracker_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x77,
	0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x77, 0x61,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x22, 0x9a,
	0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x22, 0x2c, 0x0a, 0x0d, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22, 0x42, 0x0a, 0x04, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x0b, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa1, 0x01, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x2e, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x70, 0x74, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x12,
	0x14, 0x2e, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0c, 0x12, 0x0a, 0x2f, 0x70, 0x74, 0x2f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x42, 0x11, 0x5a,
	0x0f, 0x70, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pt_v1_tracker_proto_rawDescOnce sync.Once
	file_pt_v1_tracker_proto_rawDescData = file_pt_v1_tracker_proto_rawDesc
)

func file_pt_v1_tracker_proto_rawDescGZIP() []byte {
	file_pt_v1_tracker_proto_rawDescOnce.Do(func() {
		file_pt_v1_tracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_pt_v1_tracker_proto_rawDescData)
	})
	return file_pt_v1_tracker_proto_rawDescData
}

var file_pt_v1_tracker_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pt_v1_tracker_proto_goTypes = []interface{}{
	(*AnnounceRequest)(nil), // 0: pt.v1.AnnounceRequest
	(*AnnounceReply)(nil),   // 1: pt.v1.AnnounceReply
	(*ScrapeRequest)(nil),   // 2: pt.v1.ScrapeRequest
	(*Stat)(nil),            // 3: pt.v1.Stat
	(*ScrapeReply)(nil),     // 4: pt.v1.ScrapeReply
	nil,                     // 5: pt.v1.ScrapeReply.FilesEntry
}
var file_pt_v1_tracker_proto_depIdxs = []int32{
	5, // 0: pt.v1.ScrapeReply.files:type_name -> pt.v1.ScrapeReply.FilesEntry
	3, // 1: pt.v1.ScrapeReply.FilesEntry.value:type_name -> pt.v1.Stat
	0, // 2: pt.v1.Tracker.Announce:input_type -> pt.v1.AnnounceRequest
	2, // 3: pt.v1.Tracker.Scrape:input_type -> pt.v1.ScrapeRequest
	1, // 4: pt.v1.Tracker.Announce:output_type -> pt.v1.AnnounceReply
	4, // 5: pt.v1.Tracker.Scrape:output_type -> pt.v1.ScrapeReply
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pt_v1_tracker_proto_init() }
func file_pt_v1_tracker_proto_init() {
	if File_pt_v1_tracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pt_v1_tracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pt_v1_tracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pt_v1_tracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pt_v1_tracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pt_v1_tracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pt_v1_tracker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pt_v1_tracker_proto_goTypes,
		DependencyIndexes: file_pt_v1_tracker_proto_depIdxs,
		MessageInfos:      file_pt_v1_tracker_proto_msgTypes,
	}.Build()
	File_pt_v1_tracker_proto = out.File
	file_pt_v1_tracker_proto_rawDesc = nil
	file_pt_v1_tracker_proto_goTypes = nil
	file_pt_v1_tracker_proto_depIdxs = nil
}
