// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.26.0
// source: pt/v1/tracker.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTrackerAnnounce = "/pt.v1.Tracker/Announce"
const OperationTrackerScrape = "/pt.v1.Tracker/Scrape"

type TrackerHTTPServer interface {
	// Announce Sends a greeting
	Announce(context.Context, *AnnounceRequest) (*AnnounceReply, error)
	Scrape(context.Context, *ScrapeRequest) (*ScrapeReply, error)
}

func RegisterTrackerHTTPServer(s *http.Server, srv TrackerHTTPServer) {
	r := s.Route("/")
	r.GET("/pt/announce", _Tracker_Announce0_HTTP_Handler(srv))
	r.GET("/pt/scrape", _Tracker_Scrape0_HTTP_Handler(srv))
}

func _Tracker_Announce0_HTTP_Handler(srv TrackerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnnounceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTrackerAnnounce)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Announce(ctx, req.(*AnnounceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnnounceReply)
		return ctx.Result(200, reply)
	}
}

func _Tracker_Scrape0_HTTP_Handler(srv TrackerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScrapeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTrackerScrape)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Scrape(ctx, req.(*ScrapeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScrapeReply)
		return ctx.Result(200, reply)
	}
}

type TrackerHTTPClient interface {
	Announce(ctx context.Context, req *AnnounceRequest, opts ...http.CallOption) (rsp *AnnounceReply, err error)
	Scrape(ctx context.Context, req *ScrapeRequest, opts ...http.CallOption) (rsp *ScrapeReply, err error)
}

type TrackerHTTPClientImpl struct {
	cc *http.Client
}

func NewTrackerHTTPClient(client *http.Client) TrackerHTTPClient {
	return &TrackerHTTPClientImpl{client}
}

func (c *TrackerHTTPClientImpl) Announce(ctx context.Context, in *AnnounceRequest, opts ...http.CallOption) (*AnnounceReply, error) {
	var out AnnounceReply
	pattern := "/pt/announce"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTrackerAnnounce))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TrackerHTTPClientImpl) Scrape(ctx context.Context, in *ScrapeRequest, opts ...http.CallOption) (*ScrapeReply, error) {
	var out ScrapeReply
	pattern := "/pt/scrape"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTrackerScrape))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
